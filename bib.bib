%%\bibitem{berg02}
%%  Berger, E. D.; Zorn, B. G.; McKinley, K. S. (November 2002). ``Reconsidering Custom Memory Allocation''. Proceedings of the 17th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications. pp. 1–12.

%%\bibitem{blan03}
%%  Blanchet, Bruno (November 2003). "Escape Analysis for JavaTM: Theory and Practice". ACM Trans. Program. Lang. Syst. 25 (6): 713–775.
  
%%\bibitem{chis11}
%%  Chisnall, David (2011-01-12). Influential Programming Languages, Part 4: Lisp.
  
%%\bibitem{hertz05}
%%  Hertz, Matthew; Berger, Emery D. (2005). ``Quantifying the Performance of Garbage Collection vs. Explicit Memory Management.'' OOPSLA 2005.

%%\bibitem{pythDocs}
%%  ``Reference Counts''. Extending and Embedding the Python Interpreter. 21 February 2008.

%%\bibitem{ibmJava}
%%  ``Real-time Java, Part 4: Real-time garbage collection''.
@Book{os_textbook,
  author =       {Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau},
  title =        "{Operating Systems: Three Easy Pieces}",
  publisher =    {Arpaci-Dusseau Books},
  month =        "May",
  year =         {2015},
  edition =      {0.91},
},

@inproceedings{ungar,
 author = {Ungar, David},
 title = {Generation Scavenging: A Non-disruptive High Performance Storage Reclamation Algorithm},
 booktitle = {Proceedings of the First ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments},
 series = {SDE 1},
 year = {1984},
 isbn = {0-89791-131-8},
 pages = {157--167},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/800020.808261},
 doi = {10.1145/800020.808261},
 acmid = {808261},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Generation, Grabage collection, Personnel computer, Real time, Scavenge, Smalltalk, Virtual memory, Workstation},
},
@article{bruy,
 author = {Bruynooghe, Maurice},
 title = {A Practical Framework for the Abstract Interpretation of Logic Programs},
 journal = {J. Log. Program.},
 issue_date = {Feb. 1991},
 volume = {10},
 number = {2},
 month = jan,
 year = {1991},
 issn = {0743-1066},
 pages = {91--124},
 numpages = {34},
 url = {http://dx.doi.org/10.1016/0743-1066(91)80001-T},
 doi = {10.1016/0743-1066(91)80001-T},
 acmid = {110704},
 publisher = {Elsevier Science Inc.},
 address = {New York, NY, USA},
} ,

@article{perform,
	title = {Quantifying the {Performance} of {Garbage} {Collection} vs. {Explicit} {Memory} {Management}},
	abstract = {Garbage collection yields numerous software engineering beneﬁts, but its quantitative impact on performance remains elusive. One can compare the cost of conservative garbage collection to explicit memory management in C/C++ programs by linking in an appropriate collector. This kind of direct comparison is not possible for languages designed for garbage collection (e.g., Java), because programs in these languages naturally do not contain calls to free. Thus, the actual gap between the time and space performance of explicit memory management and precise, copying garbage collection remains unknown.},
	language = {en},
	author = {Hertz, Matthew and Berger, Emery D},
	pages = {14},
	file = {Hertz and Berger - Quantifying the Performance of Garbage Collection .pdf:/Users/joemacinnes/Zotero/storage/KHRDV8R4/Hertz and Berger - Quantifying the Performance of Garbage Collection .pdf:application/pdf}
}
@article{goodman,
    title = {Origins of {Garbage} {Collection}},
    abstract = {McCarthy introduces the LISP language and invents garbage collection to implement the language, devoting just over a page to a mark and sweep algorithm that identiﬁes reachable words by depth-ﬁrst search. McCarthy insists that S-expression structures be immutable, allowing for copying by reference sharing. This optimization, as well as a future relaxation on immutability, gives a practical motivation for garbage collection.},
    language = {en},
    author = {Goodman, Jason},
    pages = {5},
    file = {Goodman - Origins of Garbage Collection.pdf:/Users/joemacinnes/Zotero/storage/2WCSXWW3/Goodman - Origins of Garbage Collection.pdf:application/pdf}
},


@misc{chis11,
    Author = {David ~Chisnall},
	Title = {Influential Programming Languages, Part 4: Lisp},
	Year = {2011},
	howpublished = {\url{http://www.informit.com/articles/article.aspx?p=1671639}},
	note = {Accessed: 2018-10-4}
	}

@proceedings{hertz05,
    Author = {Matthew ~Hertz and Emery D. ~Berger},
	Year = 2005,
	Title = {Quantifying the Performance of Garbage Collection vs. Explicit Memory Management},
	Organization = {OOPSLA}}

@article{blan03,
    Author = {Bruno ~Blanchet},
	Year = 2003,
	Title = {Escape analysis for Java: Theory and practice},
	Journal = {ACM Transactions on Programming Languages and Systems},
	Volume = {25},
	Number = {6},
	Pages = {713-775}}

@misc{ibmJava,
    Author = {Benjamin ~Biron and Ryan ~Sciampacone},
	Year = 2007,
	Booktitle = {Real-time Java},
	Volume = 4,
	Title = {Real-time garbage collection},
	howpublished = {\url{https://www.ibm.com/developerworks/java/library/j-rtj4/index.html}}}

@misc{pythDocs,
    Title = {Reference Counts},
	Author = {Guido van ~Rossum},
	Editor = {Fred L. ~Drake, Jr.},
	Booktitle = {Extending and Embedding the Python Interpreter},
	Year = {2008},
	howpublished = {\url{https://docs.python.org/release/2.5.2/ext/refcounts.html}}
	}
